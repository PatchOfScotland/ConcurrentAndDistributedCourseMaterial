window.COURSE_DATA = {"language":"en-GB","lastDownload":"2019-09-24T10:57:41+02:00","title":"5030-B2-2E18;Concurrent and Distributed Systems","modules":[{"id":128427,"name":"Course Contents","status":"completed","unlockDate":null,"prereqs":[],"requirement":null,"sequential":false,"exportId":"g69e59ffe3957f286685116e6b6c616a5","items":[{"id":655538,"title":"Course Outline","type":"Attachment","indent":0,"locked":false,"requirement":null,"completed":false,"content":"viewer/files/course_outline_student.pdf"},{"id":655539,"title":"Assignment 1","type":"Attachment","indent":0,"locked":false,"requirement":null,"completed":false,"content":"viewer/files/cnd-assignment1.pdf"},{"id":655540,"title":"Assignment 2","type":"Attachment","indent":0,"locked":false,"requirement":null,"completed":false,"content":"viewer/files/cnd-assignment2.pdf"},{"id":669827,"title":"Protocol decisions for Assignment #2","type":"WikiPage","indent":1,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003eThis is a summary of the decisions made today on what protocol and design restrictions to use. It serves as a clarification of the text in assignment #2.\u003c/p\u003e\r\n\u003cp\u003eWe agreed that the setup should cover 4 sensors boards. The boards should be placed in a fixed position such that two are vertical and two are horizontal. The boards are numbered [0-3] counting clockwise, starting from the top. Inside each board, the microphones are numbered [0-n], starting from left for the horizontally positioned ones, and from the top for the vertical positioned ones. In this system, (0,0) is top left.\u003c/p\u003e\r\n\u003cp\u003eEach board detects an edge signal from each microphone, and decides the order in which the sound reached the microphone and produces an ordered list, where the first element is the microphone that detected the sound first.\u003c/p\u003e\r\n\u003cp\u003eTo keep track of the order of events, each board will also keep an updated vector clock, keeping track of the event counters for all boards in the network. The local event counter is updated on each detected edge that is to be transmitted.\u003c/p\u003e\r\n\u003cp\u003eEach board will broadcast the order of edges, the vector clock and the local board ID after it has detected an edge.\u003c/p\u003e\r\n\u003cp\u003eThe network will use ZeroMQ and the publish/subscribe setup to communicate. Each board will publish on each edge, and use CSP to coordinate subscribtions to each of the other 3 boards. Inside each board it should be able to accept edge data from the local board as well as from the 3 other boards and combine this to a coordinate indicating where the sound occurred.\u003c/p\u003e\r\n\u003cp\u003eThe data needs to be serialized with `pickle`, \u003ca href=\"https://pyzmq.readthedocs.io/en/latest/serialization.html\"\u003ewhich is supported directly by the `PyZMQ` package\u003c/a\u003e through the `send_pyobj()` method.\u003c/p\u003e\r\n\u003cp\u003eWe agreed that the format should be `[[sensor0,sensor1,...,sensorN],vector clock,id]`. So for a setup with 3 sensors, we could publish with `send_pyobj([[1,2,0],[1,0,0,0],0])`.\u003c/p\u003e\r\n\u003cp\u003eAs mentioned, we will set up a switch Tuesday the 18th at the practical session, such that you can try the designs against one another. If you can, please try to have a working design by Tuesday so you can test it out.\u003c/p\u003e","exportId":"protocol-decisions-for-assignment-number-2"},{"id":669883,"title":"Work plan proposal for assignment #2","type":"WikiPage","indent":1,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003eThis page is proposed work plan for assignment #2. The purpose of this page is to provide a guided bite-sized step-by-step plan towards a working solution. You can also use this plan to gauge how far you are from a result, and to ask for more directed help, such as \"I am stuck at point nn, what should I do\".\u003c/p\u003e\r\n\u003cp\u003eThe work plan is just a suggestion, and you are free to use your own approach.\u003c/p\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003eProposed work plan:\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli\u003eGet PyZMQ pub/sub example working\u003c/li\u003e\r\n\u003cli\u003eSend example data and verify it is working\u003c/li\u003e\r\n\u003cli\u003eMake a function that updates a local vector clock given a new external vector clock\u003c/li\u003e\r\n\u003cli\u003eMake a function that gets 4 messages (one from each board) and outputs a position\u003c/li\u003e\r\n\u003cli\u003eMake a PyCSP implementation with 4 listener processes that pulls in messages\u003c/li\u003e\r\n\u003cli\u003eMake a PyCSP process that can read the 4 messages and output a position guess\u003c/li\u003e\r\n\u003cli\u003eMake a simple test process that mimics the microphones and emits a microphone order. Initially this should send out a fixed list, e.g. [0,1,2], and later testing can do something more random.\u003c/li\u003e\r\n\u003cli\u003eConnect to the actual board microphones and test\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003cp\u003e \u003c/p\u003e","exportId":"work-plan-proposal-for-assignment-number-2"},{"id":669660,"title":"ZeroMQ tutorial","type":"ExternalUrl","indent":1,"locked":false,"requirement":null,"completed":false,"content":"https://learning-0mq-with-pyzmq.readthedocs.io/en/latest/"},{"id":671458,"title":"PyZMQ example","type":"WikiPage","indent":2,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003eIt turns out the PyZMQ example I posted does not work well with Python 3.\u003c/p\u003e\r\n\u003cp\u003eHere is an updated version that works in Python 3.\u003c/p\u003e\r\n\u003cp\u003eNote that you need to set an empty \"topic\" for pub/sub as we do not use that feature.\u003c/p\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eserver.py\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003eimport zmq\u003cbr\u003eimport random\u003cbr\u003eimport sys\u003cbr\u003eimport time\u003cbr\u003e\u003cbr\u003eport = \"5556\"\u003cbr\u003eif len(sys.argv) \u0026gt; 1:\u003cbr\u003e    port =  sys.argv[1]\u003cbr\u003e    int(port)\u003cbr\u003e\u003cbr\u003econtext = zmq.Context()\u003cbr\u003esocket = context.socket(zmq.PUB)\u003cbr\u003esocket.bind(\"tcp://*:%s\" % port)\u003cbr\u003e\u003cbr\u003ewhile True:\u003cbr\u003e    topic = random.randrange(9999,10005)\u003cbr\u003e    messagedata = random.randrange(1,215) - 80\u003cbr\u003e    print(\"%d %d\" % (topic, messagedata))\u003cbr\u003e    socket.send_pyobj((topic, messagedata))\u003cbr\u003e    time.sleep(1)\u003c/pre\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eclient.py\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003eimport sys\u003cbr\u003eimport zmq\u003cbr\u003e\u003cbr\u003eport = \"5556\"\u003cbr\u003eif len(sys.argv) \u0026gt; 1:\u003cbr\u003e    port = sys.argv[1]\u003cbr\u003e    int(port)\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e# Socket to talk to server\u003cbr\u003econtext = zmq.Context()\u003cbr\u003esocket = context.socket(zmq.SUB)\u003cbr\u003e\u003cbr\u003eprint(\"Collecting updates from weather server...\")\u003cbr\u003esocket.connect (\"tcp://localhost:%s\" % port)\u003cbr\u003e\u003cbr\u003e# Important, empty topic filter\u003cbr\u003esocket.setsockopt_string(zmq.SUBSCRIBE, \"\")\u003cbr\u003e\u003cbr\u003etotal_value = 0\u003cbr\u003efor update_nbr in range (5):\u003cbr\u003e    topic, messagedata = socket.recv_pyobj()\u003cbr\u003e    total_value += int(messagedata)\u003cbr\u003e    print(topic, messagedata)\u003cbr\u003e\u003cbr\u003eprint(\"Average messagedata value was %dF\" % (total_value / update_nbr))\u003c/pre\u003e","exportId":"pyzmq-example"},{"id":655541,"title":"Assignment 3","type":"Attachment","indent":0,"locked":false,"requirement":null,"completed":false,"content":"viewer/files/cnd-assignment3.pdf"},{"id":672999,"title":"Example for Assignment 3","type":"WikiPage","indent":1,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003eYou can download a version for the program from the slides:\u003c/p\u003e\r\n\u003cp\u003e\u003ca class=\"instructure_file_link\" title=\"sme-example.zip\" href=\"viewer/files/sme-example.zip?canvas_download=1\u0026amp;canvas_qs_wrap=1\" data-api-endpoint=\"https://absalon.ku.dk/api/v1/courses/28482/files/2567594\" data-api-returntype=\"File\"\u003esme-example.zip\u003c/a\u003e\u003c/p\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003ch3\u003eInstalling required software\u003c/h3\u003e\r\n\u003cp\u003eOn Linux and MacOS you need to install Mono for it to run. You can get the updated version here:\u003c/p\u003e\r\n\u003cp\u003e\u003ca href=\"https://www.mono-project.com/download/stable/\"\u003ehttps://www.mono-project.com/download/stable/\u003c/a\u003e\u003c/p\u003e\r\n\u003cp\u003eNote: On Linux (especially Ubuntu) _do not use the distro version_ of Mono as it is +4 years old.\u003c/p\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003eOn Windows you can use either .Net (pre-installed) or Mono from the link above.\u003c/p\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003eIf you use \u003ca href=\"https://code.visualstudio.com/\"\u003eVS Code\u003c/a\u003e or Visual Studio, you should be able to open it the unpacked solution and have the tasks ready. You might want to install the `C#` and `mono-debug` packages for VS Code.\u003c/p\u003e\r\n\u003cp\u003eIf you run from the commandline, you need to run:\u003c/p\u003e\r\n\u003cpre\u003enuget restore -SolutionDirectory .\u003cbr\u003emsbuild sme_example.csproj\u003c/pre\u003e\r\n\u003cp\u003eThe binary output is `bin/Debug/sme_example.exe` and can run as-is on Windows. Linux/MacOS needs  `mono bin/Debug/sme_example.exe`.\u003c/p\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003eGHDL is available pre-compiled for all major OS'es here:\u003c/p\u003e\r\n\u003cp\u003e\u003ca href=\"https://github.com/ghdl/ghdl/releases\"\u003ehttps://github.com/ghdl/ghdl/releases\u003c/a\u003e\u003c/p\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003eTo get the generated `Makefile` to work, you need the GHDL executable to be in your system path.\u003c/p\u003e\r\n\u003cp\u003eOn Linux/MacOS you can add a symlink to the executable like this:\u003c/p\u003e\r\n\u003cpre\u003esudo ln -s /path/to/ghdl/binary /usr/local/bin\u003c/pre\u003e\r\n\u003cp\u003eThis will create a symlink in `/usr/local/bin` which is then picked up by the shell.\u003c/p\u003e\r\n\u003cp\u003eOn Windows, and as an alternate method on Linux/MacOS, you can add the folder where the GHDL executable is located to your \"PATH\" environment variable. If you do this, make sure you restart the shell to pick up the new environment variable.\u003c/p\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003ch3\u003eRunning the example project\u003c/h3\u003e\r\n\u003cp\u003eOnce you have everything set up, you can try the example project. The normal build process converts the C# source code into a binary (.exe) file.\u003c/p\u003e\r\n\u003cp\u003eUsing Mono or .Net you can run your project, which will generate a folder named `output` and place VHDL files inside it. In this folder you run the Makefile, which will compile the VHDL and produce an executable.\u003c/p\u003e\r\n\u003cp\u003eFrom the commandline your session could look like this:\u003c/p\u003e\r\n\u003cpre\u003e\u0026gt; nuget restore -SolutionDirectory .\u003cbr\u003e\u003cbr\u003e\u0026gt; msbuild sme_example.csproj\u003cbr\u003e... build output and a warning ...\u003cbr\u003e\u003cbr\u003e\u0026gt; cd bin/Debug\u003cbr\u003e\u0026gt; mono sme_example.exe\u003cbr\u003eSome signals were not written to bus sme_example.IGraderResult by sme_example.ImageClasifier during the execution, this will lead to latches in the design: Grade\u003cbr\u003eGrade for image 0 is: 2\u003cbr\u003eSome signals were not written to bus sme_example.ICounterControl by sme_example.PixelClasifier during the execution, this will lead to latches in the design: Valid\u003cbr\u003eGrade for image 1 is: 2\u003cbr\u003e\u0026gt; cd output/vhdl\u003cbr\u003e\u0026gt; make\u003cbr\u003emkdir work\u003cbr\u003eghdl -a --std=93c --ieee=synopsys --workdir=work system_types.vhdl\u003cbr\u003eghdl -a --std=93c --ieee=synopsys --workdir=work Types_sme_example.vhdl\u003cbr\u003eghdl -a --std=93c --ieee=synopsys --workdir=work Counter.vhdl\u003cbr\u003eghdl -a --std=93c --ieee=synopsys --workdir=work PixelClasifier.vhdl\u003cbr\u003eghdl -a --std=93c --ieee=synopsys --workdir=work ImageClasifier.vhdl\u003cbr\u003eghdl -a --std=93c --ieee=synopsys --workdir=work csv_util.vhdl\u003cbr\u003eghdl -a --std=93c --ieee=synopsys --workdir=work sme_example.vhdl\u003cbr\u003eghdl -a --std=93c --ieee=synopsys --workdir=work TestBench_sme_example.vhdl\u003cbr\u003eghdl -e --std=93c --ieee=synopsys --workdir=work sme_example_tb\u003cbr\u003ecp \"../trace.csv\" .\u003cbr\u003eghdl -r --std=93c --ieee=synopsys --workdir=work sme_example_tb --vcd=trace.vcd\u003cbr\u003eTestBench_sme_example.vhdl:362:9:@8045ns:(report note): completed successfully after 804 clockcycles\u003cbr\u003eghdl -a --std=93c --ieee=synopsys --workdir=work Export_sme_example.vhdl\u003c/pre\u003e\r\n\u003cp\u003eThe default for the make command will build and execute the testbench, so you should see on of the last lines reporting the \"completed successfully\" message.\u003c/p\u003e\r\n\u003cp\u003eThe warnings about latches is a performance warning for the generated hardware and can be ignored. To avoid the warning, each process must write each output in every cycle.\u003c/p\u003e\r\n\u003cp\u003e \u003c/p\u003e","exportId":"example-for-assignment-3"},{"id":676736,"title":"Work plan proposal for assignment #3","type":"WikiPage","indent":1,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003eThis page is proposed work plan for assignment #3. The purpose of this page is to provide a guided bite-sized step-by-step plan towards a working solution. You can also use this plan to gauge how far you are from a result, and to ask for more directed help, such as \"I am stuck at point nn, what should I do\".\u003c/p\u003e\r\n\u003cp\u003eThe work plan is just a suggestion, and you are free to use your own approach.\u003c/p\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003eProposed work plan:\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli\u003e\u003ca title=\"Example for Assignment 3\" href=\"pages/example-for-assignment-3\"\u003eInstall required tools\u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003eTest that \u003ca title=\"Example for Assignment 3\" href=\"pages/example-for-assignment-3\"\u003eeverything works with the example project\u003c/a\u003e\n\u003c/li\u003e\r\n\u003cli\u003eRemove all files from the example, except the `Program.cs` file\u003c/li\u003e\r\n\u003cli\u003eCopy in \u003ca title=\"Handout for Assignment 3\" href=\"discussion_topics/g7a0c55045da8b0399cc16920ab553fd1\"\u003ethe microphone simulator\u003c/a\u003e\n\u003c/li\u003e\r\n\u003cli\u003eWrite a process that reads from the microphone simulator bus\u003c/li\u003e\r\n\u003cli\u003eFix `Program.cs` to use only the two processes (simulator + reader)\u003c/li\u003e\r\n\u003cli\u003eImplement an edge detection algoritm\u003c/li\u003e\r\n\u003cli\u003eWrite a bus that can be used to signal the edge\u003c/li\u003e\r\n\u003cli\u003eWrite a process that determines which edge came first\u003c/li\u003e\r\n\u003cli\u003eUpdate `Program.cs` to wire up two edge detectors to the detector process\u003c/li\u003e\r\n\u003c/ol\u003e","exportId":"work-plan-proposal-for-assignment-number-3"},{"id":676738,"title":"Microphone simulator","type":"ExternalUrl","indent":1,"locked":false,"requirement":null,"completed":false,"content":"https://absalon.ku.dk/courses/28482/discussion_topics/161362"},{"id":655856,"title":"Pynq Quickstart guide","type":"ExternalUrl","indent":0,"locked":false,"requirement":null,"completed":false,"content":"https://pynq.readthedocs.io/en/v2.0/getting_started.html"},{"id":665129,"title":"ACM sigconf templates for Word and LaTeX","type":"ExternalUrl","indent":0,"locked":false,"requirement":null,"completed":false,"content":"https://www.acm.org/publications/proceedings-template-16dec2016"}]},{"id":128684,"name":"Lecture slides and notes","status":"completed","unlockDate":null,"prereqs":[],"requirement":null,"sequential":false,"exportId":"g7eb719a93c4ea323fd28e0652ad424c1","items":[{"id":657538,"title":"1 Parallel and its Problems.odp","type":"Attachment","indent":0,"locked":false,"requirement":null,"completed":false,"content":"viewer/files/1 Parallel and its Problems.odp"},{"id":665114,"title":"1 Parallel and its Problems.pdf","type":"Attachment","indent":0,"locked":false,"requirement":null,"completed":false,"content":"viewer/files/1 Parallel and its Problems.pdf"},{"id":657539,"title":"2 PyCSP.odp","type":"Attachment","indent":0,"locked":false,"requirement":null,"completed":false,"content":"viewer/files/2 PyCSP.odp"},{"id":665115,"title":"2 PyCSP.pdf","type":"Attachment","indent":0,"locked":false,"requirement":null,"completed":false,"content":"viewer/files/2 PyCSP.pdf"},{"id":662461,"title":"Processes, threads, fibers","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003eHere are some additional links describing the terms processes, threads, and fibers:\u003c/p\u003e\r\n\u003cp\u003e\u003ca href=\"http://cgi.cse.unsw.edu.au/~cs3231/13s1/lectures/lect06.pdf\"\u003ehttp://cgi.cse.unsw.edu.au/~cs3231/13s1/lectures/lect06.pdf\u003c/a\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ca href=\"https://nikgrozev.com/2015/07/14/overview-of-modern-concurrency-and-parallelism-concepts/\"\u003ehttps://nikgrozev.com/2015/07/14/overview-of-modern-concurrency-and-parallelism-concepts/\u003c/a\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ca href=\"https://www.quora.com/What-is-the-difference-between-a-fiber-and-a-thread\"\u003ehttps://www.quora.com/What-is-the-difference-between-a-fiber-and-a-thread\u003c/a\u003e\u003c/p\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003eAnd slides from a talk on schedulers: \u003ca class=\"instructure_file_link\" title=\"Principles of computer system design - 2015\" href=\"viewer/files/Chapter%206,%202x45%20min.pdf?canvas_download=1\u0026amp;canvas_qs_wrap=1\"\u003ePrinciples of computer system design - 2015\u003c/a\u003e\u003c/p\u003e","exportId":"processes-threads-fibers"},{"id":662547,"title":"3 Deadlock, Livelock, Clients and Servers.odp","type":"Attachment","indent":0,"locked":false,"requirement":null,"completed":false,"content":"viewer/files/3 Deadlock, Livelock, Clients and Servers.odp"},{"id":665116,"title":"3 Deadlock, Livelock, Clients and Servers.pdf","type":"Attachment","indent":0,"locked":false,"requirement":null,"completed":false,"content":"viewer/files/3 Deadlock, Livelock, Clients and Servers.pdf"},{"id":662548,"title":"4 Desiging a system.odp","type":"Attachment","indent":0,"locked":false,"requirement":null,"completed":false,"content":"viewer/files/4 Desiging a system.odp"},{"id":665117,"title":"4 Desiging a system.pdf","type":"Attachment","indent":0,"locked":false,"requirement":null,"completed":false,"content":"viewer/files/4 Desiging a system.pdf"},{"id":662549,"title":"5 Determinism and Race Conditions.odp","type":"Attachment","indent":0,"locked":false,"requirement":null,"completed":false,"content":"viewer/files/5 Determinism and Race Conditions.odp"},{"id":665118,"title":"5 Determinism and Race Conditions.pdf","type":"Attachment","indent":0,"locked":false,"requirement":null,"completed":false,"content":"viewer/files/5 Determinism and Race Conditions.pdf"},{"id":662550,"title":"6 Compartmentalisation and Subprocess.odp","type":"Attachment","indent":0,"locked":false,"requirement":null,"completed":false,"content":"viewer/files/6 Compartmentalisation and Subprocess.odp"},{"id":665119,"title":"6 Compartmentalisation and Subprocess.pdf","type":"Attachment","indent":0,"locked":false,"requirement":null,"completed":false,"content":"viewer/files/6 Compartmentalisation and Subprocess.pdf"},{"id":662554,"title":"7 Other Useful Concepts.odp","type":"Attachment","indent":0,"locked":false,"requirement":null,"completed":false,"content":"viewer/files/7 Other Useful Concepts.odp"},{"id":665120,"title":"7 Other Useful Concepts.pdf","type":"Attachment","indent":0,"locked":false,"requirement":null,"completed":false,"content":"viewer/files/7 Other Useful Concepts.pdf"},{"id":665111,"title":"8 Network Communication.odp","type":"Attachment","indent":0,"locked":false,"requirement":null,"completed":false,"content":"viewer/files/8 Network Communication.odp"},{"id":665122,"title":"8 Network Communication.pdf","type":"Attachment","indent":0,"locked":false,"requirement":null,"completed":false,"content":"viewer/files/8 Network Communication.pdf"},{"id":665058,"title":"9 Santa Problem.odp","type":"Attachment","indent":0,"locked":false,"requirement":null,"completed":false,"content":"viewer/files/9 Santa Problem.odp"},{"id":665060,"title":"9 Santa Problem.pdf","type":"Attachment","indent":0,"locked":false,"requirement":null,"completed":false,"content":"viewer/files/9 Santa Problem.pdf"},{"id":673015,"title":"Santa Problem Solution.odp","type":"Attachment","indent":0,"locked":false,"requirement":null,"completed":false,"content":"viewer/files/presentationSlidesAbridged.odp"},{"id":667521,"title":"Materials for Lecture 6","type":"ExternalUrl","indent":0,"locked":false,"requirement":null,"completed":false,"content":"https://sid.erda.dk/wsgi-bin/ls.py?share_id=ho9OLFIJmp"},{"id":673018,"title":"Lecture 9 - SME.pdf","type":"Attachment","indent":0,"locked":false,"requirement":null,"completed":false,"content":"viewer/files/Lecture 9 - SME.pdf"},{"id":674324,"title":"Lecture 10 - HW and HDLs.pdf","type":"Attachment","indent":0,"locked":false,"requirement":null,"completed":false,"content":"viewer/files/Lecture 10 - HW and HDLs.pdf"},{"id":680199,"title":"State machines and exam intro.pdf","type":"Attachment","indent":0,"locked":false,"requirement":null,"completed":false,"content":"viewer/files/State machines and exam intro.pdf"}]},{"id":110874,"name":"Library and Study Information","status":"completed","unlockDate":null,"prereqs":[],"requirement":null,"sequential":false,"exportId":"g5d3da7e526dc8926c436a01fca243bf5","items":[{"id":559832,"title":"Copenhagen University Library: books, journals and info for your study","type":"ExternalUrl","indent":0,"locked":false,"requirement":null,"completed":false,"content":"http://kub.kb.dk/c.php?g=514341\u0026p=3514066\u0026preview=8882aa68f366075fe92c490f6da2733c"},{"id":559833,"title":"Study Information Websites","type":"ExternalUrl","indent":0,"locked":false,"requirement":null,"completed":false,"content":"https://intranet.ku.dk/science/en/students/Pages/default.aspx"}]},{"id":118513,"name":"Course information","status":"completed","unlockDate":null,"prereqs":[],"requirement":null,"sequential":false,"exportId":"g95250c01fbd2e558ae7328d205f7c666","items":[{"id":597430,"title":"Course information","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003eSchedule: \u003ca class=\"\" title=\"Link\" href=\"https://skema.ku.dk/tt/tt.asp?SDB=KU1819\u0026amp;language=DK\u0026amp;folder=Reporting\u0026amp;style=textspreadsheet\u0026amp;type=module\u0026amp;idtype=id\u0026amp;id=81940\u0026amp;weeks=17-21;23-26\u0026amp;days=1-5\u0026amp;periods=5-52\u0026amp;width=0\u0026amp;height=0\u0026amp;template=SWSCUST2+module+textspreadsheet\" data-preview-alt=\"\"\u003eLink\u003c/a\u003e\u003c/p\u003e\r\n\u003cp\u003eExam dates: \u003ca class=\"\" title=\"Link\" href=\"https://www.science.ku.dk/eksamensdatoer/B2-2O_040718.PDF\" data-preview-alt=\"\"\u003eLink\u003c/a\u003e\u003c/p\u003e\r\n\u003cp\u003eCourse description: \u003ca class=\"\" title=\"Link\" href=\"http://kurser.ku.dk/course/nfyk18002u/2018-2019\" data-preview-alt=\"\"\u003eLink\u003c/a\u003e\u003c/p\u003e","exportId":"course-information"}]}],"pages":[{"exportId":"work-plan-proposal-for-assignment-number-3","title":"Work plan proposal for assignment #3","type":"WikiPage","content":"\u003cp\u003eThis page is proposed work plan for assignment #3. The purpose of this page is to provide a guided bite-sized step-by-step plan towards a working solution. You can also use this plan to gauge how far you are from a result, and to ask for more directed help, such as \"I am stuck at point nn, what should I do\".\u003c/p\u003e\r\n\u003cp\u003eThe work plan is just a suggestion, and you are free to use your own approach.\u003c/p\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003eProposed work plan:\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli\u003e\u003ca title=\"Example for Assignment 3\" href=\"pages/example-for-assignment-3\"\u003eInstall required tools\u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003eTest that \u003ca title=\"Example for Assignment 3\" href=\"pages/example-for-assignment-3\"\u003eeverything works with the example project\u003c/a\u003e\n\u003c/li\u003e\r\n\u003cli\u003eRemove all files from the example, except the `Program.cs` file\u003c/li\u003e\r\n\u003cli\u003eCopy in \u003ca title=\"Handout for Assignment 3\" href=\"discussion_topics/g7a0c55045da8b0399cc16920ab553fd1\"\u003ethe microphone simulator\u003c/a\u003e\n\u003c/li\u003e\r\n\u003cli\u003eWrite a process that reads from the microphone simulator bus\u003c/li\u003e\r\n\u003cli\u003eFix `Program.cs` to use only the two processes (simulator + reader)\u003c/li\u003e\r\n\u003cli\u003eImplement an edge detection algoritm\u003c/li\u003e\r\n\u003cli\u003eWrite a bus that can be used to signal the edge\u003c/li\u003e\r\n\u003cli\u003eWrite a process that determines which edge came first\u003c/li\u003e\r\n\u003cli\u003eUpdate `Program.cs` to wire up two edge detectors to the detector process\u003c/li\u003e\r\n\u003c/ol\u003e","frontPage":false},{"exportId":"work-plan-proposal-for-assignment-number-2","title":"Work plan proposal for assignment #2","type":"WikiPage","content":"\u003cp\u003eThis page is proposed work plan for assignment #2. The purpose of this page is to provide a guided bite-sized step-by-step plan towards a working solution. You can also use this plan to gauge how far you are from a result, and to ask for more directed help, such as \"I am stuck at point nn, what should I do\".\u003c/p\u003e\r\n\u003cp\u003eThe work plan is just a suggestion, and you are free to use your own approach.\u003c/p\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003eProposed work plan:\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli\u003eGet PyZMQ pub/sub example working\u003c/li\u003e\r\n\u003cli\u003eSend example data and verify it is working\u003c/li\u003e\r\n\u003cli\u003eMake a function that updates a local vector clock given a new external vector clock\u003c/li\u003e\r\n\u003cli\u003eMake a function that gets 4 messages (one from each board) and outputs a position\u003c/li\u003e\r\n\u003cli\u003eMake a PyCSP implementation with 4 listener processes that pulls in messages\u003c/li\u003e\r\n\u003cli\u003eMake a PyCSP process that can read the 4 messages and output a position guess\u003c/li\u003e\r\n\u003cli\u003eMake a simple test process that mimics the microphones and emits a microphone order. Initially this should send out a fixed list, e.g. [0,1,2], and later testing can do something more random.\u003c/li\u003e\r\n\u003cli\u003eConnect to the actual board microphones and test\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003cp\u003e \u003c/p\u003e","frontPage":false},{"exportId":"processes-threads-fibers","title":"Processes, threads, fibers","type":"WikiPage","content":"\u003cp\u003eHere are some additional links describing the terms processes, threads, and fibers:\u003c/p\u003e\r\n\u003cp\u003e\u003ca href=\"http://cgi.cse.unsw.edu.au/~cs3231/13s1/lectures/lect06.pdf\"\u003ehttp://cgi.cse.unsw.edu.au/~cs3231/13s1/lectures/lect06.pdf\u003c/a\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ca href=\"https://nikgrozev.com/2015/07/14/overview-of-modern-concurrency-and-parallelism-concepts/\"\u003ehttps://nikgrozev.com/2015/07/14/overview-of-modern-concurrency-and-parallelism-concepts/\u003c/a\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ca href=\"https://www.quora.com/What-is-the-difference-between-a-fiber-and-a-thread\"\u003ehttps://www.quora.com/What-is-the-difference-between-a-fiber-and-a-thread\u003c/a\u003e\u003c/p\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003eAnd slides from a talk on schedulers: \u003ca class=\"instructure_file_link\" title=\"Principles of computer system design - 2015\" href=\"viewer/files/Chapter%206,%202x45%20min.pdf?canvas_download=1\u0026amp;canvas_qs_wrap=1\"\u003ePrinciples of computer system design - 2015\u003c/a\u003e\u003c/p\u003e","frontPage":false},{"exportId":"pyzmq-example","title":"PyZMQ example","type":"WikiPage","content":"\u003cp\u003eIt turns out the PyZMQ example I posted does not work well with Python 3.\u003c/p\u003e\r\n\u003cp\u003eHere is an updated version that works in Python 3.\u003c/p\u003e\r\n\u003cp\u003eNote that you need to set an empty \"topic\" for pub/sub as we do not use that feature.\u003c/p\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eserver.py\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003eimport zmq\u003cbr\u003eimport random\u003cbr\u003eimport sys\u003cbr\u003eimport time\u003cbr\u003e\u003cbr\u003eport = \"5556\"\u003cbr\u003eif len(sys.argv) \u0026gt; 1:\u003cbr\u003e    port =  sys.argv[1]\u003cbr\u003e    int(port)\u003cbr\u003e\u003cbr\u003econtext = zmq.Context()\u003cbr\u003esocket = context.socket(zmq.PUB)\u003cbr\u003esocket.bind(\"tcp://*:%s\" % port)\u003cbr\u003e\u003cbr\u003ewhile True:\u003cbr\u003e    topic = random.randrange(9999,10005)\u003cbr\u003e    messagedata = random.randrange(1,215) - 80\u003cbr\u003e    print(\"%d %d\" % (topic, messagedata))\u003cbr\u003e    socket.send_pyobj((topic, messagedata))\u003cbr\u003e    time.sleep(1)\u003c/pre\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eclient.py\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003eimport sys\u003cbr\u003eimport zmq\u003cbr\u003e\u003cbr\u003eport = \"5556\"\u003cbr\u003eif len(sys.argv) \u0026gt; 1:\u003cbr\u003e    port = sys.argv[1]\u003cbr\u003e    int(port)\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e# Socket to talk to server\u003cbr\u003econtext = zmq.Context()\u003cbr\u003esocket = context.socket(zmq.SUB)\u003cbr\u003e\u003cbr\u003eprint(\"Collecting updates from weather server...\")\u003cbr\u003esocket.connect (\"tcp://localhost:%s\" % port)\u003cbr\u003e\u003cbr\u003e# Important, empty topic filter\u003cbr\u003esocket.setsockopt_string(zmq.SUBSCRIBE, \"\")\u003cbr\u003e\u003cbr\u003etotal_value = 0\u003cbr\u003efor update_nbr in range (5):\u003cbr\u003e    topic, messagedata = socket.recv_pyobj()\u003cbr\u003e    total_value += int(messagedata)\u003cbr\u003e    print(topic, messagedata)\u003cbr\u003e\u003cbr\u003eprint(\"Average messagedata value was %dF\" % (total_value / update_nbr))\u003c/pre\u003e","frontPage":false},{"exportId":"course-information","title":"Course information","type":"WikiPage","content":"\u003cp\u003eSchedule: \u003ca class=\"\" title=\"Link\" href=\"https://skema.ku.dk/tt/tt.asp?SDB=KU1819\u0026amp;language=DK\u0026amp;folder=Reporting\u0026amp;style=textspreadsheet\u0026amp;type=module\u0026amp;idtype=id\u0026amp;id=81940\u0026amp;weeks=17-21;23-26\u0026amp;days=1-5\u0026amp;periods=5-52\u0026amp;width=0\u0026amp;height=0\u0026amp;template=SWSCUST2+module+textspreadsheet\" data-preview-alt=\"\"\u003eLink\u003c/a\u003e\u003c/p\u003e\r\n\u003cp\u003eExam dates: \u003ca class=\"\" title=\"Link\" href=\"https://www.science.ku.dk/eksamensdatoer/B2-2O_040718.PDF\" data-preview-alt=\"\"\u003eLink\u003c/a\u003e\u003c/p\u003e\r\n\u003cp\u003eCourse description: \u003ca class=\"\" title=\"Link\" href=\"http://kurser.ku.dk/course/nfyk18002u/2018-2019\" data-preview-alt=\"\"\u003eLink\u003c/a\u003e\u003c/p\u003e","frontPage":false},{"exportId":"pynq-setup","title":"Pynq setup","type":"WikiPage","content":"\u003cp\u003e\u003ca href=\"https://pynq.readthedocs.io/en/latest/getting_started.html\"\u003ehttps://pynq.readthedocs.io/en/latest/getting_started.html\u003c/a\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ca href=\"https://www.nengo.ai/nengo-pynq/connect.html\"\u003ehttps://www.nengo.ai/nengo-pynq/connect.html\u003c/a\u003e\u003c/p\u003e","frontPage":false},{"exportId":"protocol-decisions-for-assignment-number-2","title":"Protocol decisions for Assignment #2","type":"WikiPage","content":"\u003cp\u003eThis is a summary of the decisions made today on what protocol and design restrictions to use. It serves as a clarification of the text in assignment #2.\u003c/p\u003e\r\n\u003cp\u003eWe agreed that the setup should cover 4 sensors boards. The boards should be placed in a fixed position such that two are vertical and two are horizontal. The boards are numbered [0-3] counting clockwise, starting from the top. Inside each board, the microphones are numbered [0-n], starting from left for the horizontally positioned ones, and from the top for the vertical positioned ones. In this system, (0,0) is top left.\u003c/p\u003e\r\n\u003cp\u003eEach board detects an edge signal from each microphone, and decides the order in which the sound reached the microphone and produces an ordered list, where the first element is the microphone that detected the sound first.\u003c/p\u003e\r\n\u003cp\u003eTo keep track of the order of events, each board will also keep an updated vector clock, keeping track of the event counters for all boards in the network. The local event counter is updated on each detected edge that is to be transmitted.\u003c/p\u003e\r\n\u003cp\u003eEach board will broadcast the order of edges, the vector clock and the local board ID after it has detected an edge.\u003c/p\u003e\r\n\u003cp\u003eThe network will use ZeroMQ and the publish/subscribe setup to communicate. Each board will publish on each edge, and use CSP to coordinate subscribtions to each of the other 3 boards. Inside each board it should be able to accept edge data from the local board as well as from the 3 other boards and combine this to a coordinate indicating where the sound occurred.\u003c/p\u003e\r\n\u003cp\u003eThe data needs to be serialized with `pickle`, \u003ca href=\"https://pyzmq.readthedocs.io/en/latest/serialization.html\"\u003ewhich is supported directly by the `PyZMQ` package\u003c/a\u003e through the `send_pyobj()` method.\u003c/p\u003e\r\n\u003cp\u003eWe agreed that the format should be `[[sensor0,sensor1,...,sensorN],vector clock,id]`. So for a setup with 3 sensors, we could publish with `send_pyobj([[1,2,0],[1,0,0,0],0])`.\u003c/p\u003e\r\n\u003cp\u003eAs mentioned, we will set up a switch Tuesday the 18th at the practical session, such that you can try the designs against one another. If you can, please try to have a working design by Tuesday so you can test it out.\u003c/p\u003e","frontPage":false},{"exportId":"example-for-assignment-3","title":"Example for Assignment 3","type":"WikiPage","content":"\u003cp\u003eYou can download a version for the program from the slides:\u003c/p\u003e\r\n\u003cp\u003e\u003ca class=\"instructure_file_link\" title=\"sme-example.zip\" href=\"viewer/files/sme-example.zip?canvas_download=1\u0026amp;canvas_qs_wrap=1\" data-api-endpoint=\"https://absalon.ku.dk/api/v1/courses/28482/files/2567594\" data-api-returntype=\"File\"\u003esme-example.zip\u003c/a\u003e\u003c/p\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003ch3\u003eInstalling required software\u003c/h3\u003e\r\n\u003cp\u003eOn Linux and MacOS you need to install Mono for it to run. You can get the updated version here:\u003c/p\u003e\r\n\u003cp\u003e\u003ca href=\"https://www.mono-project.com/download/stable/\"\u003ehttps://www.mono-project.com/download/stable/\u003c/a\u003e\u003c/p\u003e\r\n\u003cp\u003eNote: On Linux (especially Ubuntu) _do not use the distro version_ of Mono as it is +4 years old.\u003c/p\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003eOn Windows you can use either .Net (pre-installed) or Mono from the link above.\u003c/p\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003eIf you use \u003ca href=\"https://code.visualstudio.com/\"\u003eVS Code\u003c/a\u003e or Visual Studio, you should be able to open it the unpacked solution and have the tasks ready. You might want to install the `C#` and `mono-debug` packages for VS Code.\u003c/p\u003e\r\n\u003cp\u003eIf you run from the commandline, you need to run:\u003c/p\u003e\r\n\u003cpre\u003enuget restore -SolutionDirectory .\u003cbr\u003emsbuild sme_example.csproj\u003c/pre\u003e\r\n\u003cp\u003eThe binary output is `bin/Debug/sme_example.exe` and can run as-is on Windows. Linux/MacOS needs  `mono bin/Debug/sme_example.exe`.\u003c/p\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003eGHDL is available pre-compiled for all major OS'es here:\u003c/p\u003e\r\n\u003cp\u003e\u003ca href=\"https://github.com/ghdl/ghdl/releases\"\u003ehttps://github.com/ghdl/ghdl/releases\u003c/a\u003e\u003c/p\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003eTo get the generated `Makefile` to work, you need the GHDL executable to be in your system path.\u003c/p\u003e\r\n\u003cp\u003eOn Linux/MacOS you can add a symlink to the executable like this:\u003c/p\u003e\r\n\u003cpre\u003esudo ln -s /path/to/ghdl/binary /usr/local/bin\u003c/pre\u003e\r\n\u003cp\u003eThis will create a symlink in `/usr/local/bin` which is then picked up by the shell.\u003c/p\u003e\r\n\u003cp\u003eOn Windows, and as an alternate method on Linux/MacOS, you can add the folder where the GHDL executable is located to your \"PATH\" environment variable. If you do this, make sure you restart the shell to pick up the new environment variable.\u003c/p\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003ch3\u003eRunning the example project\u003c/h3\u003e\r\n\u003cp\u003eOnce you have everything set up, you can try the example project. The normal build process converts the C# source code into a binary (.exe) file.\u003c/p\u003e\r\n\u003cp\u003eUsing Mono or .Net you can run your project, which will generate a folder named `output` and place VHDL files inside it. In this folder you run the Makefile, which will compile the VHDL and produce an executable.\u003c/p\u003e\r\n\u003cp\u003eFrom the commandline your session could look like this:\u003c/p\u003e\r\n\u003cpre\u003e\u0026gt; nuget restore -SolutionDirectory .\u003cbr\u003e\u003cbr\u003e\u0026gt; msbuild sme_example.csproj\u003cbr\u003e... build output and a warning ...\u003cbr\u003e\u003cbr\u003e\u0026gt; cd bin/Debug\u003cbr\u003e\u0026gt; mono sme_example.exe\u003cbr\u003eSome signals were not written to bus sme_example.IGraderResult by sme_example.ImageClasifier during the execution, this will lead to latches in the design: Grade\u003cbr\u003eGrade for image 0 is: 2\u003cbr\u003eSome signals were not written to bus sme_example.ICounterControl by sme_example.PixelClasifier during the execution, this will lead to latches in the design: Valid\u003cbr\u003eGrade for image 1 is: 2\u003cbr\u003e\u0026gt; cd output/vhdl\u003cbr\u003e\u0026gt; make\u003cbr\u003emkdir work\u003cbr\u003eghdl -a --std=93c --ieee=synopsys --workdir=work system_types.vhdl\u003cbr\u003eghdl -a --std=93c --ieee=synopsys --workdir=work Types_sme_example.vhdl\u003cbr\u003eghdl -a --std=93c --ieee=synopsys --workdir=work Counter.vhdl\u003cbr\u003eghdl -a --std=93c --ieee=synopsys --workdir=work PixelClasifier.vhdl\u003cbr\u003eghdl -a --std=93c --ieee=synopsys --workdir=work ImageClasifier.vhdl\u003cbr\u003eghdl -a --std=93c --ieee=synopsys --workdir=work csv_util.vhdl\u003cbr\u003eghdl -a --std=93c --ieee=synopsys --workdir=work sme_example.vhdl\u003cbr\u003eghdl -a --std=93c --ieee=synopsys --workdir=work TestBench_sme_example.vhdl\u003cbr\u003eghdl -e --std=93c --ieee=synopsys --workdir=work sme_example_tb\u003cbr\u003ecp \"../trace.csv\" .\u003cbr\u003eghdl -r --std=93c --ieee=synopsys --workdir=work sme_example_tb --vcd=trace.vcd\u003cbr\u003eTestBench_sme_example.vhdl:362:9:@8045ns:(report note): completed successfully after 804 clockcycles\u003cbr\u003eghdl -a --std=93c --ieee=synopsys --workdir=work Export_sme_example.vhdl\u003c/pre\u003e\r\n\u003cp\u003eThe default for the make command will build and execute the testbench, so you should see on of the last lines reporting the \"completed successfully\" message.\u003c/p\u003e\r\n\u003cp\u003eThe warnings about latches is a performance warning for the generated hardware and can be ignored. To avoid the warning, each process must write each output in every cycle.\u003c/p\u003e\r\n\u003cp\u003e \u003c/p\u003e","frontPage":false}],"assignments":[{"exportId":"g07313022a12c4f60b24f555b0a175a4e","title":"The Cricket Locator - Part 1","type":"Assignment","content":"\u003cp\u003e\u003ca class=\"instructure_file_link\" title=\"cnd-assignment1.pdf\" href=\"viewer/files/cnd-assignment1.pdf?canvas_download=1\u0026amp;canvas_qs_wrap=1\"\u003eAssignment text: cnd-assignment1.pdf\u003c/a\u003e\u003c/p\u003e","submissionTypes":"a file upload","graded":true,"pointsPossible":0.0,"dueAt":"2018-12-07T23:59:59+01:00","lockAt":null,"unlockAt":null},{"exportId":"gb29f590dca206ef3d19c04f26b9c7832","title":"The Cricket Locator - Part 2","type":"Assignment","content":"\u003cp\u003e\u003ca class=\"instructure_file_link\" title=\"cnd-assignment2.pdf\" href=\"viewer/files/cnd-assignment2.pdf?canvas_download=1\u0026amp;canvas_qs_wrap=1\"\u003eAssignment text: cnd-assignment2.pdf\u003c/a\u003e\u003c/p\u003e","submissionTypes":"a file upload","graded":true,"pointsPossible":0.0,"dueAt":"2018-12-21T23:59:59+01:00","lockAt":null,"unlockAt":null},{"exportId":"gc0082814941b5d94d51e81341cefa465","title":"The Cricket Locator - Part 3","type":"Assignment","content":"\u003cp\u003e\u003ca class=\"instructure_file_link\" title=\"cnd-assignment3.pdf\" href=\"viewer/files/cnd-assignment3.pdf?canvas_download=1\u0026amp;canvas_qs_wrap=1\"\u003eAssignment text: cnd-assignment3.pdf\u003c/a\u003e\u003c/p\u003e","submissionTypes":"a file upload","graded":true,"pointsPossible":0.0,"dueAt":"2019-01-11T23:59:59+01:00","lockAt":null,"unlockAt":null}],"discussion_topics":[{"exportId":"g10f598b5a7a185c9cf75dadb98e88c1f","title":"Clarification: Setting multiple pins high","type":"DiscussionTopic","content":"\u003cp\u003eHi,\u003c/p\u003e\r\n\u003cp\u003ewhen you refer to multiple buttons being physically pressed, would that result in the following input:\u003c/p\u003e\r\n\u003cp\u003eWould it result in two clock cycles of input with no \"0\" lines between them, or would it result in two pins being set to high in the same clock cycle?\u003c/p\u003e\r\n\u003cp\u003eor should we handle both?\u003c/p\u003e\r\n\u003cp\u003eThanks in advance,\u003c/p\u003e\r\n\u003cp\u003eMax\u003c/p\u003e","lockAt":null,"unlockAt":null,"graded":false},{"exportId":"g635c5686f7eed8913912a85dd70e41c5","title":"Error in VDHL","type":"DiscussionTopic","content":"\u003cp\u003eHi\u003c/p\u003e\r\n\u003cp\u003eWhen I try to call \"make\" in the vhdl directory, I get this error :\u003cbr\u003e\u003cbr\u003eTestBench_sme_example.vhdl:94:9:@0ms:(assertion failure): Field #2 is not correctly named: IPrintData#2.Value, expected PMODExtIn.data\u003cbr\u003e\u003cbr\u003eI have no idea of how I solve this.\u003c/p\u003e\r\n\u003cp\u003e- Michael\u003c/p\u003e","lockAt":null,"unlockAt":null,"graded":false},{"exportId":"geefbdefe028743c9dc57e324c1bf5b97","title":"Can't get \"sim.Run();\" to run propperly","type":"DiscussionTopic","content":"\u003cp\u003eHaving spent a good ~2 hours trying to get my own implementation up and running, i keep failing at getting 'sim.run()' to work.\u003cbr\u003e\u003cbr\u003eDespite spawning the objet/class 'MicSimulator', i'm still met with an error, that in short can be summed up to:\u003cbr\u003e\u003cbr\u003eUnhandled Exception:\u003cbr\u003eSystem.Exception: No processes were found in the list\u003cbr\u003e\u003cbr\u003e\u003c/p\u003e\r\n\u003cp\u003eIt should be noted that the camera/sme_example DOES work, despite the code being almost identical.\u003c/p\u003e\r\n\u003cp\u003eAny advice? Can't seem to find any good descriptions online\u003c/p\u003e\r\n\u003cp\u003e \u003c/p\u003e","lockAt":null,"unlockAt":null,"graded":false},{"exportId":"g43c10725aa02d7fbdafd3be216783869","title":"Await ClockASync keeps waiting/exiting the program?","type":"DiscussionTopic","content":"\u003cp\u003eI have tried to make a simple printer which prints a lot of numbers\u003c/p\u003e\r\n\u003cp\u003eI have a class Print which has the interface of \"IPrintData\". It has a number that starts at 0 and has a \"OnTick\" function which increment the number by 1. (I think that when the class/object is used, the class/object is incremented by 1)\u003c/p\u003e\r\n\u003cp\u003eThen I have a validator which has a while loop, that prints out the value of m_results. Afterwards it \"await ClockAsync();\"\u003c/p\u003e\r\n\u003cp\u003eI expect that this will print out the number from 0 to infinity. Though it only prints out the number 0, and then exists with 0. I have also tried to print out something after the \"ClockAsync\" but that will never be printed.\u003c/p\u003e","lockAt":null,"unlockAt":null,"graded":false},{"exportId":"g2ee48768cee53d9c94703cd2dfa255e7","title":"Pycsp : (Fair/Alt/Pri)Select","type":"DiscussionTopic","content":"\u003cp\u003eHi\u003c/p\u003e\r\n\u003cp\u003eIn pycsp, if a process receive two messages at the same time, and do any selection, and then picks one. What happens to the other message, does it disappear or will the process put it in a queue?\u003c/p\u003e\r\n\u003cp\u003e- Michael\u003c/p\u003e","lockAt":null,"unlockAt":null,"graded":false},{"exportId":"gca735fe21a53c50e36cc3be914f71a06","title":"Returning the PYNQ board","type":"DiscussionTopic","content":"\u003cp\u003eSince we won't be using the boards anymore during the course, can we return them this friday?\u003c/p\u003e\r\n\u003cp\u003eAnd should we do anything to the boards before returning them (like deleting the code we have written on them)?\u003c/p\u003e","lockAt":null,"unlockAt":null,"graded":false},{"exportId":"gb2a07d21b332349d187ff3ed77f86f9a","title":"CSP process won't yield while sending/receiving using pyZMQ","type":"DiscussionTopic","content":"\u003cp\u003eAs the title states, it doesn't seem like a CSP process can yield if it is either sending or receiving over TCP until the message has been delivered - but this only happens if the processes communicating are started using pyCSP (like \"Parallel(-processes-)\" for example).\u003c/p\u003e\r\n\u003cp\u003eHowever, this means that you can not broadcast and receive at the same time. I believe that this is caused by the fact that we have had to use \"greenlets\" for pyCSP (to make pyCSP work with python3), since \"\u003cspan\u003eGreenlets never run in parallel, they all share the same process and the same thread, so, there is at most one of them running at a time.\", which means that all calls within a process are atomic (i.e. you cannot stop halfway through an operation).\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003eIs this correct, or is there something here that I am overlooking?\u003c/p\u003e\r\n\u003cp\u003eThanks in advance!\u003c/p\u003e","lockAt":null,"unlockAt":null,"graded":false},{"exportId":"gdbda8268a8812885f8cc33dc4542528e","title":"Slides from Brian's Lectures","type":"DiscussionTopic","content":"\u003cp\u003eMaybe I just can't find it, but does anyone know where the slides from Brian's lectures are located?\u003c/p\u003e\r\n\u003cp\u003eThanks in advance,\u003c/p\u003e\r\n\u003cp\u003eMax\u003c/p\u003e","lockAt":null,"unlockAt":null,"graded":false},{"exportId":"g4276cd907057d25a05c6a188ec87f78a","title":"Installing PYNQ for python2.7","type":"DiscussionTopic","content":"\u003cp\u003eSome lectures ago it was brought up that channels in  'pycsp' don't work the way described in the lecture notes in python3 (python changing their string representation from python2 to python3 seems to be the cause), and therefore, I have installed 'pycsp' for python2, as well as a python2 jupyter kernel. However, is it even possible to use 'pynq' (as \"from pynq import Overlay\" f.ex.) with python2? It seems like 'pynq' is only meant to be used with python3, and installation works like a charm both through 'pip' and the official repo \u003ca href=\"https://github.com/Xilinx/PYNQ\"\u003e(https://github.com/Xilinx/PYNQ\u003c/a\u003e).\u003c/p\u003e\r\n\u003cp\u003eFor python2, however, I get the following error for both 'pip' and through downloading the package and using the 'setup.py' script: \u003c/p\u003e\r\n\u003cp\u003eTraceback (most recent call last):\u003cbr\u003e    File \"\u0026lt;string\u0026gt;\", line 1, in \u0026lt;module\u0026gt;\u003cbr\u003e    File \"/tmp/pip-0gAd_k-build/setup.py\", line 107, in \u0026lt;module\u0026gt;\u003cbr\u003e        CPU_ARCH = os.uname().machine\u003cbr\u003eAttributeError: 'tuple' object has no attribute 'machine'\u003c/p\u003e\r\n\u003cp\u003eHas anyone found a way to use 'pynq' with python2?\u003c/p\u003e","lockAt":null,"unlockAt":null,"graded":false}],"quizzes":[],"files":[{"type":"file","name":"8 Network Communication.pdf","size":82413,"files":null},{"type":"file","name":"3 Deadlock, Livelock, Clients and Servers.odp","size":29042,"files":null},{"type":"file","name":"cnd-assignment3.pdf","size":196734,"files":null},{"type":"file","name":"MicEdgeDetector_z2.zip","size":96042,"files":null},{"type":"file","name":"microphone_sample.txt","size":4963711,"files":null},{"type":"file","name":"course_outline_student.pdf","size":35598,"files":null},{"type":"file","name":"cnd-assignment1.pdf","size":116267,"files":null},{"type":"file","name":"Microphone PMOD 0.1.zip","size":141057,"files":null},{"type":"file","name":"CnD 2018 - MD5.pdf","size":397330,"files":null},{"type":"file","name":"5 Determinism and Race Conditions.odp","size":21411,"files":null},{"type":"file","name":"cnd-assignment2.pdf","size":208180,"files":null},{"type":"file","name":"Lecture 10 - HW and HDLs.pdf","size":572185,"files":null},{"type":"file","name":"7 Other Useful Concepts.odp","size":21914,"files":null},{"type":"file","name":"presentationSlidesAbridged.odp","size":50680,"files":null},{"type":"file","name":"5 Determinism and Race Conditions.pdf","size":91660,"files":null},{"type":"file","name":"8 Network Communication.odp","size":21425,"files":null},{"type":"file","name":"2 PyCSP.pdf","size":63655,"files":null},{"type":"file","name":"sme-example.zip","size":20721463,"files":null},{"type":"file","name":"9 Santa Problem.odp","size":17238,"files":null},{"type":"file","name":"Chapter 6, 2x45 min.pdf","size":368214,"files":null},{"type":"file","name":"Microphone PMOD 0.2.zip","size":224964,"files":null},{"type":"file","name":"CnD 2018 - VHDL implementation.pdf","size":109616,"files":null},{"type":"file","name":"7 Other Useful Concepts.pdf","size":61872,"files":null},{"type":"file","name":"Lecture 9 - SME.pdf","size":5573767,"files":null},{"type":"file","name":"6 Compartmentalisation and Subprocess.pdf","size":61844,"files":null},{"type":"file","name":"4 Desiging a system.odp","size":16233,"files":null},{"type":"file","name":"1 Parallel and its Problems.odp","size":30821,"files":null},{"type":"file","name":"6 Compartmentalisation and Subprocess.odp","size":26719,"files":null},{"type":"file","name":"CnD 2018 - Transputer.pdf","size":582161,"files":null},{"type":"file","name":"1 Parallel and its Problems.pdf","size":101439,"files":null},{"type":"file","name":"9 Santa Problem.pdf","size":31559,"files":null},{"type":"file","name":"State machines and exam intro.pdf","size":484760,"files":null},{"type":"file","name":"4 Desiging a system.pdf","size":24554,"files":null},{"type":"file","name":"2 PyCSP.odp","size":27880,"files":null},{"type":"folder","name":"course_image","size":null,"files":[{"type":"file","name":"KU - hovedbygning1.jpg","size":59029,"files":null}]},{"type":"file","name":"3 Deadlock, Livelock, Clients and Servers.pdf","size":114155,"files":null}]}